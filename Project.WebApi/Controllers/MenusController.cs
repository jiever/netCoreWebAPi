//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//     生成时间 05/21/2018 09:42:17 By 朱峰
//     对此文件的更改可能会导致不正确的行为，并且如果
//     文件已存在，不会覆盖。
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using AutoMapper;
using Microsoft.AspNetCore.Mvc;
using Project.IBLL;
using Project.Model;
using Project.Model.Conditions;
using Project.Model.Dtos;
using Project.WebApi.Filters;

namespace Project.WebApi.Controllers
{
    [Produces("application/json")]
    [Route("api/menus")]
    public class MenusController : Controller
    {
        private readonly IMenusService _menusService;

        public MenusController(IMenusService menusService)
        {
            _menusService = menusService;
        }

        /// <summary>
        ///     添加菜单
        /// </summary>
        /// <param name="dto">实体</param>
        /// <returns></returns>
        [HttpPost("")]
        [Validate]
        public IActionResult Insert([FromBody] MenusDto dto)
        {
            var product = Mapper.Map<Menus>(dto);
            return Ok(_menusService.Insert(product));
        }

        /// <summary>
        ///     批量新增菜单
        /// </summary>
        /// <param name="dtos">实体集合</param>
        /// <returns></returns>
        [HttpPost("bulk_insert")]
        [Validate]
        public IActionResult Insert([FromBody] List<MenusDto> dtos)
        {
            var models = Mapper.Map<List<Menus>>(dtos);
            var result = _menusService.Insert(models);
            if (result)
            {
                return Ok();
            }
            return BadRequest();
        }

        /// <summary>
        ///     更新菜单
        /// </summary>
        /// <param name="id">主键</param>
        /// <param name="dto">实体</param>
        /// <returns></returns>
        [HttpPut("{id}")]
        [Validate]
        public IActionResult Update(int id, [FromBody] MenusDto dto)
        {
            if (!_menusService.Exists(id))
            {
                return NotFound();
            }
            var model = Mapper.Map<Menus>(dto);
            var result = _menusService.Update(model);
            if (result)
            {
                return Ok();
            }
            return NotFound();
        }

        /// <summary>
        ///     逻辑删除菜单
        /// </summary>
        /// <param name="id">主键Id</param>
        /// <returns></returns>
        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
            var result = _menusService.SoftDelete(id);
            if (result)
            {
                return Ok();
            }
            return NotFound();
        }

        /// <summary>
        ///     批量删除菜单
        /// </summary>
        /// <param name="ids">主键集合</param>
        /// <returns></returns>
        [HttpPost("bulk_delete")]
        public IActionResult Delete([FromBody] List<int> ids)
        {
            var result = _menusService.SoftDelete(ids);
            if (result)
            {
                return Ok();
            }
            return NotFound();
        }

        /// <summary>
        ///     根据主键Id获取实体
        /// </summary>
        /// <param name="id">主键Id</param>
        /// <returns></returns>
        [HttpGet("{id}")]
        public IActionResult GetByPk(int id)
        {
            var product = _menusService.GetByPk(id);
            if (product == null)
            {
                return NotFound();
            }
            return Ok(Mapper.Map<MenusDto>(product));
        }

        /// <summary>
        ///     根据主键Id集合获取实体集合
        /// </summary>
        /// <param name="ids">主键Id集合</param>
        /// <returns></returns>
        [HttpGet("get_list")]
        public IActionResult GetList(List<int> ids)
        {
            var products = _menusService.GetList(ids);
            if (products?.Count > 0)
            {
                return Ok(Mapper.Map<List<MenusDto>>(products));
            }
            return NotFound();
        }

        /// <summary>
        /// 分页查询
        /// </summary>
        /// <param name="page"></param>
        /// <param name="size"></param>
        /// <param name="sort"></param>
        /// <param name="condition"></param>
        [HttpGet("get_by_page")]
        public IActionResult GetByPage(int? page = null, int? size = null, string sort = "addTime desc", MenusCondition condition = null)
        {
            if (page.HasValue && size.HasValue && page > 0 && size > 0)
            {
                var result = _menusService.GetByPage(page.Value, size.Value, sort, condition);
                return Ok(new PageModel<MenusDto>
                {
                    Total = result.Total,
                    Data = Mapper.Map<List<MenusDto>>(result.Data)
                });
            }
               return BadRequest();
        }
        /// <summary>
        /// 查询菜单（树形展示）
        /// </summary>
        /// <param name="appcode"></param>
        /// <returns></returns>
        [HttpGet("get_menu_tree")]
        public IActionResult GetMenuTree(int? appcode = null)
        {
            List<MenusTreeDto> menus = _menusService.GetMenus(appcode);
            if (menus == null || menus.Count <= 0)
            {
                return NotFound();
            }
            else
            {
               var menu = _menusService.InitMenuTree(new MenusTreeDto(), menus);
                return Ok(menu.Children);
            }
        }
    }
}

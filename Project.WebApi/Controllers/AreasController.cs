//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//     生成时间 05/03/2018 18:58:49 By 朱峰
//     对此文件的更改可能会导致不正确的行为，并且如果
//     文件已存在，不会覆盖。
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;
using AutoMapper;
using Microsoft.AspNetCore.Mvc;
using Project.Common;
using Project.IBLL;
using Project.Model;
using Project.Model.Conditions;

namespace Project.WebApi.Controllers
{
    [Produces("application/json")]
    [Route("api/areas")]
    public class AreasController : Controller
    {
        private readonly IAreasService _areasService;

        public AreasController(IAreasService areasService)
        {
            _areasService = areasService;
        }

        /// <summary>
        /// 分页获取地区实体列表
        /// </summary>
        /// <param name="page"></param>
        /// <param name="num"></param>
        /// <param name="sort"></param>
        /// <param name="asc"></param>
        /// <param name="name"></param>
        /// <param name="parentId"></param>
        /// <param name="type"></param>
        /// <param name="fullPinying"></param>
        /// <param name="shortPingying"></param>
        /// <param name="isUsual"></param>
        /// <returns></returns>
        [Route("{page}/{num}"), HttpGet]
        public IActionResult Get(int page, int num, string name, string fullPinying, string shortPingying, bool? isUsual, int? parentId, AreaType? type, string sort = "Id", bool? asc = true)
        {
            var condition = new AreasCondition()
            {
                Name = name,
                ParentID = parentId,
                Type = type,
                FullPinying = fullPinying,
                ShortPinying = shortPingying,
                IsUsual = isUsual
            };
            if (page <= 0 || num <= 0)
            {
                return BadRequest(MessageFactory.CreatePageParamsInvalidMessage());
            }
            var data = _areasService.GetByPage(page, num, sort, condition);
            return Ok(data);
        }
        /// <summary>
        /// 根据条件获取地区实体列表
        /// </summary>
        /// <param name="name"></param>
        /// <param name="parentId"></param>
        /// <param name="type"></param>
        /// <param name="fullPinying"></param>
        /// <param name="shortPingying"></param>
        /// <param name="isUsual"></param>
        /// <returns></returns>
        [HttpGet("getall")]
        public IActionResult Get(string name, int? parentId, AreaType? type, string fullPinying, string shortPingying, bool? isUsual)
        {
            var condition = new AreasCondition()
            {
                Name = name,
                ParentID = parentId,
                Type = type,
                FullPinying = fullPinying,
                ShortPinying = shortPingying,
                IsUsual = isUsual
            };
            var data = _areasService.GetByParameters(condition);
            return Ok(data);
        }
        /// <summary>
        /// 根据id获取地区实体信息
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [Route("{id}"), HttpGet]
        public IActionResult Get(int id)
        {
            var data = _areasService.GetByPk(id);
            if (data == null) return NotFound();
            return Ok(data);
        }
        /// <summary>
        /// 更新地区实体
        /// </summary>
        /// <param name="id"></param>
        /// <param name="model"></param>
        /// <returns></returns>
        [Route("{id}"), HttpPut]
        public IActionResult Put(int id, Areas model)
        {
            if (model == null)
            {
                return BadRequest(MessageFactory.CreateParamsIsNullMessage());
            }
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            var entity = _areasService.GetByPk(id);
            if (entity == null)
            {
                return NotFound();
            }
            _areasService.Update(model);
            return Ok();
        }
        /// <summary>
        /// 根据id获取地区层级信息
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [Route("getfull/{id}"),HttpGet]
        public IActionResult GetFullByAreaID(int id)
        {
            var data = _areasService.GetFullByAreaID(id);
            if (data == null) return NotFound();
            return Ok(data);
        }
        /// <summary>
        /// 验证子公司管辖区域是否从属上级公司的管辖区域
        /// </summary>
        /// <param name="ids">子公司管辖区域代码集合</param>
        /// <param name="parentIds">上级公司关系趋于代码集合</param>
        /// <returns></returns>
        [Route("check"), HttpGet]
        public IActionResult CheckAreas(string ids, string parentIds)
        {
            var lstIds = Utils.SplitCommaInteger(ids);
            var lstParentIds = Utils.SplitCommaInteger(parentIds);
            var lstParentAreas = new List<int>();
            foreach (var parentId in lstParentIds)
            {
                var parentAreas = _areasService.GetAreasByParentAreaID(parentId, true);
                lstParentAreas.AddRange(parentAreas.Select(x => x.Id).ToList());
            }
            foreach (var id in lstIds)
            {
                if (!lstParentAreas.Contains(id))
                {
                    return Json(new { success = false, message = "子公司管辖区域不从属于上级公司管辖区域" });
                }
            }
            return Json(new { success = true, message = "子公司管辖区域从属于上级公司管辖区域" });
        }
    }
}
